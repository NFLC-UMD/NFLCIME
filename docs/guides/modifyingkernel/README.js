Ext.data.JsonP.modifyingkernel({"guide":"<h1 id='modifyingkernel-section-contributing-to-the-project'>Contributing to the Project</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/modifyingkernel-section-core-file-locations'>Core File Locations</a></li>\n<li><a href='#!/guide/modifyingkernel-section-compressing-and-minifing-the-core'>Compressing and Minifing the Core</a></li>\n<li><a href='#!/guide/modifyingkernel-section-regenerating-the-documentation'>Regenerating the Documentation</a></li>\n</ol>\n</div>\n\n<p>Want to contribute to the project? Here's how to do it!</p>\n\n<h2 id='modifyingkernel-section-core-file-locations'>Core File Locations</h2>\n\n<p>The \"core\" consists of the following files:</p>\n\n<table>\n<thead>\n<tr>\n<th>File                       </th>\n<th> Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nflcime/nflcime.js         </td>\n<td> The endpoint of the system</td>\n</tr>\n<tr>\n<td>nflcime/src/cursor.js      </td>\n<td> Character insertion functions and text selection handling</td>\n</tr>\n<tr>\n<td>nflcime/src/cvt.js         </td>\n<td> Convert text process for data pasted into a rich-text editor</td>\n</tr>\n<tr>\n<td>nflcime/src/kb.js          </td>\n<td> Keyboard listeners</td>\n</tr>\n<tr>\n<td>nflcime/src/lang.js        </td>\n<td> Detects change to language and dispatches the appropriate events</td>\n</tr>\n<tr>\n<td>nflcime/src/lanuages.json  </td>\n<td> A configuration file that describes all supported languages/keyboards</td>\n</tr>\n<tr>\n<td>nflcime/src/pers.cookie.json </td>\n<td> A class to maintain the state of the UI elements in a cookie</td>\n</tr>\n<tr>\n<td>nflcime/src/rt.js          </td>\n<td> Event handlers for working with rich-text editors</td>\n</tr>\n<tr>\n<td>nflcime/src/rt.scrube.js   </td>\n<td> Scrubs text pasted into a rich-text editor</td>\n</tr>\n<tr>\n<td>nflcime/src/ui.iframe.js   </td>\n<td> A utility class for rendering the keyboard gui in a draggable iframe</td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id='modifyingkernel-section-compressing-and-minifing-the-core'>Compressing and Minifing the Core</h2>\n\n<p>We are using grunt (http://gruntjs.com/) to compress and minify the core.\nAfter you've installed grunt, open a command prompt to the project root that contains the file \"gruntfile.js.\" Then issue the following command:</p>\n\n<pre><code>grunt\n</code></pre>\n\n<p>Grunt will automatically parse and execute the instructions contained in gruntfile.js, resulting in the creation of the following files:</p>\n\n<ul>\n<li>nflcime/nflcime-packed.js : A compressed \"testing\" version</li>\n<li>nflcime/nflcime-packed.min.js : A compressed and minified production version</li>\n</ul>\n\n\n<h2 id='modifyingkernel-section-regenerating-the-documentation'>Regenerating the Documentation</h2>\n\n<p>The documentation was created using jsduck version 5.x (https://github.com/senchalabs/jsduck)</p>\n\n<p>After you have installed jsduck 5.x (requires gem), you can regenerate the documentation by opening a command prompt to the project root that contains the file \"jsduck.json.\" Then issue the following command:</p>\n\n<pre><code>jsduck\n</code></pre>\n\n<p>JSDuck will scan through the following config files and apply the specified directives to re-generate the documentation system:</p>\n\n<ul>\n<li>jsduck.json : Stipulates which core files to add to the documentation</li>\n<li>jsduck-examples.json: Specifies the location of runnable examples</li>\n<li>guides.json: Specifies the location of files used in the \"guides\" section of the docs</li>\n</ul>\n\n","title":"Modifying the Core"});